#!/bin/bash

# update-ddns: Google Domains Dynamic DNS Updater

### BEGIN INIT INFO
# Provides:          update-ddns
# Required-Start:    $network $time
# Required-Stop:     $network $time
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
### END INIT INFO

#LOGFILE="/var/log/update-ddns.log"
LOGFILE="example.log"

#JSONFILE="/var/lib/update-ddns/example.json"
JSONFILE="example.json"


do_main()
{	
	REGISTERED_IP=$(dig +short $HOSTNAME)
	PUBLIC_IP=$(curl ifconfig.me)
	if [[ $REGISTERED_IP == $PUBLIC_IP ]]
	then
	printf "$(date) Current IP $CURRENT_IP has not changed, Exiting \n" >> $LOGFILE
	exit 0
	fi

	
	# Google Domains Dynamin DNS
	if [ ! -z $4 ]
	then	local OUTPUT=$(wget -qO- --http-user="$2" --http-password="$3" "https://domains.google.com/nic/update?hostname=$1&myip=$4")
	else	local OUTPUT=$(wget -qO- --http-user="$2" --http-password="$3" "https://domains.google.com/nic/update?hostname=$1")
	fi

	# Print output
	printf "$OUTPUT\n"

	# Logging output
	if [ ! -z $LOGFILE ]
	then	printf "$(date +'%F %T') $1 $OUTPUT\n" >> $LOGFILE
	fi

	# Set return value
	if [ "${OUTPUT:0:4}" == "good" ] || [ "${OUTPUT:0:5}" == "nochg" ]
	then	return 0
	else	return 1
	fi
}

type_1()
{
# http://stackoverflow.com/questions/20488315
local AMOUNT=$(cat "$JSONFILE"| grep -Po '(?<="amount": )[0-9]*')
for (( i=1; i<=$AMOUNT; ++i ))
do	local HOSTNAME=$(cat "$JSONFILE"| grep -Po '(?<="hostname": ")[^"]*'| sed "$i!d") 
	local USERNAME=$(cat "$JSONFILE"| grep -Po '(?<="username": ")[^"]*'| sed "$i!d") 
	local PASSWORD=$(cat "$JSONFILE"| grep -Po '(?<="password": ")[^"]*'| sed "$i!d")
	do_main $HOSTNAME $USERNAME $PASSWORD
done
}

type_2()
{
	do_main $1 $2 $3 $4
}

do_help()
{
	printf "Google Domain Dynamic DNS Updater\n"
	printf "Usage: $0 [hostname] [username] [password] ([ip address])\n"
	printf "\n";
	printf "More info: https://support.google.com/domains/answer/6147083\n";
}

case "$1" in
	-h|-\?|--help) do_help;;
	restart|reload|force-reload)
        	echo "Error: argument '$1' not supported" >&2
        	exit 3
        ;;
	start|stop) type_1;;
	*)	if [ -z $3 ]
		then do_help
		else type_2 $1 $2 $3 $4
		fi
	;;
esac

exit
